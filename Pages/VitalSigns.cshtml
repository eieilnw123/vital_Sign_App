@page
@inject Microsoft.Extensions.Configuration.IConfiguration Configuration
@model VitalSignApp.Pages.VitalSignsModel
@{
    ViewData["Title"] = "Vital Signs (View + Update)";
}

<style>
    .pagination-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 1.5rem;
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 8px;
    }

        .pagination-controls > div {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

    .page-size-select, .jump-input {
        width: auto;
        display: inline-block;
    }

    .table-responsive {
        max-height: 65vh;
        overflow-y: auto;
    }

        .table-responsive thead th {
            position: sticky;
            top: 0;
            z-index: 1;
        }

    .risk-low {
        background-color: #d1e7dd;
    }

    .risk-medium {
        background-color: #fff3cd;
    }

    .risk-high {
        background-color: #f8d7da;
    }
</style>


<div class="d-flex justify-content-between align-items-center mb-3">
    <button class="btn btn-success" onclick="exportToExcel()">
        <i class="fas fa-file-excel me-2"></i>Export to Excel
    </button>

    <div class="d-flex">
        <input type="text" id="searchHnInput" class="form-control me-2" placeholder="ค้นหา HN..." value="@Request.Query["hn"]" autofocus onkeypress="handleSearchEnter(event)" />
        <button class="btn btn-primary me-2" onclick="searchByHn()">
            <i class="fas fa-search me-1"></i>Search
        </button>
        <button class="btn btn-secondary" onclick="clearSearch()">
            <i class="fas fa-refresh me-1"></i>Refresh
        </button>
    </div>
</div>

<div class="table-responsive">
    <table class="table table-bordered table-striped" id="vitalSignTable">
        <thead class="table-primary">
            <tr>
                <th>Recorded At</th>
                <th>HN</th>
                <th>Risk</th>
                <th style="min-width: 200px;">Name</th>
                <th>Sys</th>
                <th>Dia</th>
                <th>MAP</th>
                <th>SpO2</th>
                <th>Pulse</th>
                <th>RR</th>
                <th>Temp</th>
                <th>NEWS</th>
                <th>Oxygen</th>
                <th>Consciousness</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vs in Model.VitalSigns)
            {
                var map = (vs.Systolic.HasValue && vs.Diastolic.HasValue)
                ? (vs.Systolic.Value + 2 * vs.Diastolic.Value) / 3 : (double?)null;

                <tr class="clickable-row"
                    data-id="@vs.Id" data-name="@(vs.Name ?? "")" data-hn="@vs.Hn"
                    data-systolic="@(vs.Systolic ?? 0)" data-diastolic="@(vs.Diastolic ?? 0)"
                    data-pulse="@(vs.Pulse ?? 0)" data-sp02="@(vs.Sp02 ?? 0)"
                    data-rr="@(vs.RespiratoryRate ?? 0)" data-temp="@(vs.Temp ?? 0)">

                    <td>@(vs.RecordedAt?.ToString("dd/MM/yyyy HH:mm:ss") ?? "-")</td>
                    <td><a href="/MercuryForm?SearchHn=@vs.Hn" class="hn-link">@vs.Hn</a></td>
                    <td class="clinical-risk">-</td>
                    <td>@(vs.Name ?? "-")</td>
                    <td class="systolic">@vs.Systolic</td>
                    <td class="diastolic">@vs.Diastolic</td>
                    <td>@(map?.ToString("F1") ?? "-")</td>
                    <td class="sp02">@vs.Sp02</td>
                    <td class="pulse">@vs.Pulse</td>
                    <td class="rr">@vs.RespiratoryRate</td>
                    <td class="temp">@vs.Temp</td>
                    <td class="news-score">-</td>
                    <td>
                        <select class="form-select form-select-sm oxygen-select" onchange="calculateNewsScore(this.closest('tr'))">
                            <option value="Air">Air</option>
                            <option value="Oxygen">Oxygen</option>
                        </select>
                    </td>
                    <td>
                        <select class="form-select form-select-sm consciousness-select" onchange="calculateNewsScore(this.closest('tr'))">
                            <option value="Alert">Alert</option>
                            <option value="CVPU">CVPU</option>
                        </select>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="modal fade" id="editVitalSignModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <form id="editVitalSignForm">
                <div class="modal-header"><h5 class="modal-title">Edit Vital Sign</h5><button type="button" class="btn-close" data-bs-dismiss="modal"></button></div>
                <div class="modal-body">
                    <input type="hidden" name="Hn" id="editHn" />
                    <div class="mb-2"><label>Name</label><input type="text" class="form-control" id="editName" name="Name" readonly /></div>
                    <input type="hidden" name="Id" id="editId" />
                    <div class="mb-2"><label>Systolic</label><input type="number" name="Systolic" id="editSystolic" class="form-control" /></div>
                    <div class="mb-2"><label>Diastolic</label><input type="number" name="Diastolic" id="editDiastolic" class="form-control" /></div>
                    <div class="mb-2"><label>Pulse</label><input type="number" name="Pulse" id="editPulse" class="form-control" /></div>
                    <div class="mb-2"><label>SpO2</label><input type="number" name="Sp02" id="editSp02" class="form-control" /></div>
                    <div class="mb-2"><label>RR</label><input type="number" name="RespiratoryRate" id="editRR" class="form-control" /></div>
                    <div class="mb-2"><label>Temp</label><input type="number" step="0.1" name="Temp" id="editTemp" class="form-control" /></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="saveEdit()">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>

@{
    var isSearching = !string.IsNullOrEmpty(Request.Query["hn"]);
    var handler = isSearching ? "&handler=Search" : "";
    var hnParam = isSearching ? $"&hn={Request.Query["hn"]}" : "";
}

<div class="pagination-controls">
    <div>
        <label class="me-2">แสดงต่อหน้า:</label>
        <select class="form-select page-size-select" onchange="changePageSize(this.value)">
            @{
                var pageSizeOptions = new[] { 10, 12, 20, 50, 100 };
            }
            @foreach (var size in pageSizeOptions)
            {
                <option value="@size" selected="@(Model.PageSize == size)">@size</option>
            }
        </select>
    </div>
    <div>
        @if (Model.TotalCount > 0)
        {
            <span>Showing @Model.StartItem - @Model.EndItem of @Model.TotalCount</span>
        }
    </div>
    <div class="jump-to-page">
        <label class="me-2">ไปหน้า:</label>
        <input type="number" class="form-control jump-input" id="jumpInput"
               min="1" max="@Model.TotalPages" placeholder="@Model.CurrentPage" style="width: 80px;">
        <button class="btn btn-outline-primary btn-sm" onclick="jumpToPage()">Go</button>
    </div>
</div>

<nav aria-label="Pagination Navigation" class="mt-2">
    <ul class="pagination justify-content-center">
        @if (Model.CurrentPage > 1)
        {
            <li class="page-item"><a class="page-link" href="?currentPage=1@handler@hnParam&pageSize=@Model.PageSize">&laquo;</a></li>
            <li class="page-item"><a class="page-link" href="?currentPage=@(Model.CurrentPage - 1)@handler@hnParam&pageSize=@Model.PageSize">&lsaquo;</a></li>
        }
        @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
        {
            <li class="page-item @(i == Model.CurrentPage ? "active" : "")"><a class="page-link" href="?currentPage=@i@handler@hnParam&pageSize=@Model.PageSize">@i</a></li>
        }
        @if (Model.CurrentPage < Model.TotalPages)
        {
            <li class="page-item"><a class="page-link" href="?currentPage=@(Model.CurrentPage + 1)@handler@hnParam&pageSize=@Model.PageSize">&rsaquo;</a></li>
            <li class="page-item"><a class="page-link" href="?currentPage=@Model.TotalPages@handler@hnParam&pageSize=@Model.PageSize">&raquo;</a></li>
        }
    </ul>
</nav>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.5/xlsx.full.min.js"></script>

    <script>
        function searchByHn() {
            const hn = document.getElementById("searchHnInput").value.trim();
            if (hn) {
                const currentUrl = new URL(window.location);
                const pageSize = currentUrl.searchParams.get('pageSize') || @Model.PageSize;
                window.location.href = `?handler=Search&hn=${encodeURIComponent(hn)}&pageSize=${pageSize}`;
            }
        }

        function handleSearchEnter(event) {
            if (event.key === 'Enter') {
                searchByHn();
            }
        }

        function clearSearch() {
            const currentUrl = new URL(window.location);
            const pageSize = currentUrl.searchParams.get('pageSize') || @Model.PageSize;
            window.location.href = `${window.location.pathname}?currentPage=1&pageSize=${pageSize}`;
        }

        function exportToExcel() {
            const table = document.getElementById("vitalSignTable");
            const now = new Date();
            const filename = `VitalSigns_${now.toISOString().split('T')[0]}.xlsx`;
            const wb = XLSX.utils.table_to_book(table, { sheet: "VitalSigns" });
            XLSX.writeFile(wb, filename);
        }

        function changePageSize(newSize) {
            const currentUrl = new URL(window.location);
            currentUrl.searchParams.set('pageSize', newSize);
            currentUrl.searchParams.set('currentPage', '1');
            window.location.href = currentUrl.toString();
        }

        function jumpToPage() {
            const jumpInput = document.getElementById('jumpInput');
            const page = parseInt(jumpInput.value);
            const maxPages = parseInt(jumpInput.max);

            if (page >= 1 && page <= maxPages) {
                const currentUrl = new URL(window.location);
                currentUrl.searchParams.set('currentPage', page);
                window.location.href = currentUrl.toString();
            } else {
                alert(`Please enter a page number between 1 and ${maxPages}.`);
            }
        }

        document.addEventListener("DOMContentLoaded", function() {
            document.querySelectorAll("#vitalSignTable tbody tr").forEach(row => {
                calculateNewsScore(row);
            });

            document.querySelectorAll('.hn-link').forEach(link => {
                link.addEventListener('click', function(event) {
                    event.stopPropagation();
                });
            });

            document.querySelectorAll('.clickable-row').forEach(row => {
                row.addEventListener('click', function(event) {
                    if (event.target.closest('select, a')) {
                        return;
                    }

                    const ds = this.dataset;
                    openEditModal(
                        ds.hn, ds.systolic, ds.diastolic, ds.pulse,
                        ds.sp02, ds.rr, ds.temp, ds.id, ds.name
                    );
                });
            });
        });

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("@Model.HubUrl", { withCredentials: false })
            .build();

        connection.on("ReceiveVitalSignUpdate", function(vs) {
            console.log("SignalR update received:", vs);
            location.reload();
        });

        connection.start().then(() => console.log("✅ SignalR connected")).catch(err => console.error("SignalR Connection Error: ", err));

        function openEditModal(hn, systolic, diastolic, pulse, sp02, rr, temp, id, name) {
            document.getElementById("editId").value = id;
            document.getElementById("editName").value = name;
            document.getElementById("editHn").value = hn;
            document.getElementById("editSystolic").value = systolic ?? '';
            document.getElementById("editDiastolic").value = diastolic ?? '';
            document.getElementById("editPulse").value = pulse ?? '';
            document.getElementById("editSp02").value = sp02 ?? '';
            document.getElementById("editRR").value = rr ?? '';
            document.getElementById("editTemp").value = temp ?? '';
            new bootstrap.Modal(document.getElementById('editVitalSignModal')).show();
        }

        function saveEdit() {
            const formElem = document.getElementById("editVitalSignForm");
            const formData = new FormData(formElem);

            fetch("?handler=UpdateVitalSign", {
                method: "POST",
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        bootstrap.Modal.getInstance(document.getElementById('editVitalSignModal')).hide();
                        location.reload();
                    } else {
                        alert("❌ Update failed.");
                    }
                })
                .catch(err => {
                    console.error("Save edit error:", err);
                    alert("An error occurred while saving.");
                });
        }

        function calculateNewsScore(row) {
            function getVal(selector, float = false) {
                const text = row.querySelector(selector)?.innerText.trim();
                if (!text || text === "-" || isNaN(text)) return null;
                const val = float ? parseFloat(text) : parseInt(text);
                return val;
            }

            const rr = getVal(".rr");
            const sp02 = getVal(".sp02");
            const pulse = getVal(".pulse");
            const systolic = getVal(".systolic");
            const temp = getVal(".temp", true);
            const oxygen = row.querySelector(".oxygen-select")?.value;
            const consciousness = row.querySelector(".consciousness-select")?.value;
            const scoreCell = row.querySelector(".news-score");
            const clinicalCell = row.querySelector(".clinical-risk");

            if ([rr, sp02, pulse, systolic, temp].some(v => v === null)) {
                scoreCell.innerText = "-";
                clinicalCell.innerText = "-";
                clinicalCell.className = 'clinical-risk';
                return;
            }

            let score = 0;
            function addScore(val, rules) {
                for (const rule of rules) {
                    if (rule.condition(val)) return rule.score;
                }
                return 0;
            }

            score += addScore(rr, [{ condition: v => v <= 8 || v >= 25, score: 3 }, { condition: v => v >= 21, score: 2 }, { condition: v => v <= 11, score: 1 }]);
            score += addScore(sp02, [{ condition: v => v <= 91, score: 3 }, { condition: v => v <= 93, score: 2 }, { condition: v => v <= 95, score: 1 }]);
            score += addScore(pulse, [{ condition: v => v <= 40 || v >= 131, score: 3 }, { condition: v => v >= 111, score: 2 }, { condition: v => v >= 91 || v <= 50, score: 1 }]);
            score += addScore(temp, [{ condition: v => v <= 35.0, score: 3 }, { condition: v => v >= 39.1, score: 1 }, { condition: v => v >= 38.1, score: 1 }, { condition: v => v <= 36.0, score: 1 }]);
            score += addScore(systolic, [{ condition: v => v <= 90 || v >= 220, score: 3 }, { condition: v => v <= 100, score: 2 }, { condition: v => v <= 110, score: 1 }]);
            if (oxygen === "Oxygen") score += 2;
            if (consciousness === "CVPU") score += 3;

            scoreCell.innerText = score;

            let hasRedScore = [
                addScore(rr, [{ condition: v => v <= 8 || v >= 25, score: 3 }]),
                addScore(pulse, [{ condition: v => v <= 40 || v >= 131, score: 3 }]),
                addScore(systolic, [{ condition: v => v <= 90, score: 3 }]),
                addScore(temp, [{ condition: v => v <= 35.0, score: 3 }]),
                consciousness === "CVPU" ? 3 : 0
            ].includes(3);

            clinicalCell.className = 'clinical-risk';
            if (score >= 7 || hasRedScore) {
                clinicalCell.innerText = "High";
                clinicalCell.classList.add("risk-high");
            } else if (score >= 5) {
                clinicalCell.innerText = "Medium";
                clinicalCell.classList.add("risk-medium");
            } else if (score >= 1) {
                clinicalCell.innerText = "Low-Medium";
                clinicalCell.classList.add("risk-medium");
            } else {
                clinicalCell.innerText = "Low";
                clinicalCell.classList.add("risk-low");
            }
        }
    </script>
}